import typing as typ

import traitlets
from ipykernel.comm import Comm

class Widget(traitlets.HasTraits):
    # these are private, but are officially documented in the cookiecutter
    _ipython_display_: typ.Callable[[], typ.Any]
    _comm_default: typ.Callable[[], Comm]

class Layout(Widget): ...

class DOMWidget(Widget):
    layout: Layout = ...

class ToggleButton(DOMWidget):
    def __init__(
        self, description: typ.Text = ..., icon: typ.Text = ..., *args, **kwargs
    ): ...
    value: bool = ...
    description: typ.Text = ...
    tooltip: typ.Text = ...
    icon: typ.Text = ...

class IntSlider(DOMWidget):
    def __init__(self, min: int = ..., max: int = ..., *args, **kwargs): ...
    value: int = 0
    description: typ.Text = ...

class Textarea(DOMWidget):
    def __init__(self, description: typ.Text = ..., *args, **kwargs): ...
    value: typ.Text = ...
    description: typ.Text = ...
    rows: int = ...

class HTML(DOMWidget):
    def __init__(self, default_value: typ.Text = ..., *args, **kwargs): ...
    value: typ.Text = ...

class SelectMultiple(DOMWidget):
    def __init__(
        self, rows: int = ..., description: typ.Text = ..., *args, **kwargs
    ): ...
    value: typ.List[typ.Any] = []
    description: typ.Text = ...

class Box(DOMWidget):
    children: typ.Sequence[DOMWidget] = ...

class HBox(Box): ...
class VBox(Box): ...
